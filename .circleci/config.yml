# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.2-stretch

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.4
        #ADD ENVIRONMENT VERIABLE HERE


    working_directory: ~/repos

    steps:
      - checkout

      # Download and cache dependencies
      - add_ssh_keys:
          fingerprints:
            - c3:1c:48:35:df:15:f5:cc:00:17:44:cc:98:c6:cc:f2

      - run:
          name: make virtualenv
          command: |
            pip3 install --user virtualenv
            virtualenv env
            source env/bin/activate
      - run:
          name: installing tox
          command: |
            source env/bin/activate
            pip3 install tox

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: setup Heroku
          command: bash .circleci/setup-heroku.sh
      - run:
          name: Run Unit Tests
          command: |
            source env/bin/activate
            tox -e py37
      - deploy:
          name : deployment
          command : |
            if [ "${CIRCLE_BRANCH}" == "dev-branch" ]; then
              heroku maintenance:on --app still-tundra-14682
              git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP.git HEAD:refs/heads/master
              heroku run "python manage.py migrate --noinput" --app still-tundra-14682
              heroku maintenance:off --app circleci-demo-django
            fi
